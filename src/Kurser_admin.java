
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/*
 * Denna sida hanterar kurser, och användaren kan ändra kursinformation, ta bort kurser
 * eller se en lista på kurser som finns på Hogwarts.
 *
 * @author Elinore Hagman
 */
public class Kurser_admin extends javax.swing.JFrame {

    private InfDB idb;

    // Creates new form Kurser_admin
    public Kurser_admin(InfDB idb) {
        initComponents();
        this.idb = idb;

        // Dessa anropar metoder som fyller dropdown-menyerna med innehåll.
        fyllAmneCombobox();
        fyllLararCombobox();
        fyllKursCombobox();

        // Sätter formatet på datumfälten till det format som databasen använder sig av.
        dateKursstart.setFormats("yyyy-MM-dd");
        dateKursslut.setFormats("yyyy-MM-dd");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTitel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbAmne = new javax.swing.JLabel();
        btnRegistrera = new javax.swing.JButton();
        cbAmne = new javax.swing.JComboBox<>();
        lbSubRubrik = new javax.swing.JLabel();
        txtKursNamn = new javax.swing.JTextField();
        lbKursNamn = new javax.swing.JLabel();
        lbLarare = new javax.swing.JLabel();
        lbKursstart = new javax.swing.JLabel();
        btnTillbaka = new javax.swing.JLabel();
        cbLarare = new javax.swing.JComboBox<>();
        lbKursslut = new javax.swing.JLabel();
        lbValjKurs = new javax.swing.JLabel();
        btnAndra = new javax.swing.JButton();
        btnTaBortKurs = new javax.swing.JButton();
        dateKursstart = new org.jdesktop.swingx.JXDatePicker();
        dateKursslut = new org.jdesktop.swingx.JXDatePicker();
        btnSok = new javax.swing.JButton();
        cbValjKurs = new javax.swing.JComboBox<>();
        lbKursId = new javax.swing.JLabel();
        txtKursId = new javax.swing.JTextField();
        btnUppdateraKurslista = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        kursLista = new javax.swing.JTextArea();
        btnTomFalt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        panelTitel.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Hantera kurser");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Bilder/icons8_literature_filled_50px.png"))); // NOI18N

        javax.swing.GroupLayout panelTitelLayout = new javax.swing.GroupLayout(panelTitel);
        panelTitel.setLayout(panelTitelLayout);
        panelTitelLayout.setHorizontalGroup(
            panelTitelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitelLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel2)
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTitelLayout.setVerticalGroup(
            panelTitelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTitelLayout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(panelTitelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        lbAmne.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbAmne.setText("Ämne:");

        btnRegistrera.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        btnRegistrera.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Bilder/icons8-chevron-right-24.png"))); // NOI18N
        btnRegistrera.setText("Registrera ny kurs");
        btnRegistrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistreraActionPerformed(evt);
            }
        });

        lbSubRubrik.setFont(new java.awt.Font("Lucida Grande", 2, 14)); // NOI18N
        lbSubRubrik.setText("Ändra kursens information nedanför");

        lbKursNamn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbKursNamn.setText("Kursnamn:");

        lbLarare.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbLarare.setText("Lärare:");

        lbKursstart.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbKursstart.setText("Kursstart:");

        btnTillbaka.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Bilder/icons8-go-back-24.png"))); // NOI18N
        btnTillbaka.setText("Gå tillbaka");
        btnTillbaka.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTillbakaMouseClicked(evt);
            }
        });

        lbKursslut.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbKursslut.setText("Kursslut:");

        lbValjKurs.setText("Välj kurs:");

        btnAndra.setText("Ändra");
        btnAndra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAndraActionPerformed(evt);
            }
        });

        btnTaBortKurs.setBackground(new java.awt.Color(251, 220, 188));
        btnTaBortKurs.setText("Ta bort kurs");
        btnTaBortKurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortKursActionPerformed(evt);
            }
        });

        btnSok.setText("Sök");
        btnSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSokActionPerformed(evt);
            }
        });

        lbKursId.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbKursId.setText("Kurs ID:");

        txtKursId.setEditable(false);

        btnUppdateraKurslista.setText("Uppdatera kurslista");
        btnUppdateraKurslista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUppdateraKurslistaActionPerformed(evt);
            }
        });

        kursLista.setColumns(20);
        kursLista.setRows(5);
        jScrollPane2.setViewportView(kursLista);

        btnTomFalt.setText("Töm fält");
        btnTomFalt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTomFaltActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTitel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lbKursslut)
                                        .addGap(10, 10, 10))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnAndra, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                        .addGap(4, 4, 4)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dateKursslut, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtKursId, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtKursNamn, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnTaBortKurs, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnTomFalt))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbLarare)
                                    .addComponent(lbAmne)
                                    .addComponent(lbKursstart))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cbAmne, javax.swing.GroupLayout.Alignment.LEADING, 0, 153, Short.MAX_VALUE)
                                    .addComponent(cbLarare, javax.swing.GroupLayout.Alignment.LEADING, 0, 153, Short.MAX_VALUE)
                                    .addComponent(dateKursstart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbKursId)
                            .addComponent(lbKursNamn)
                            .addComponent(lbSubRubrik, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnRegistrera, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUppdateraKurslista))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lbValjKurs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbValjKurs, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSok, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnTillbaka)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panelTitel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbValjKurs)
                    .addComponent(btnSok)
                    .addComponent(cbValjKurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbSubRubrik, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUppdateraKurslista)
                            .addComponent(btnRegistrera, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbKursId)
                            .addComponent(txtKursId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbKursNamn)
                            .addComponent(txtKursNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbAmne)
                            .addComponent(cbAmne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbLarare)
                            .addComponent(cbLarare, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbKursstart)
                            .addComponent(dateKursstart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dateKursslut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbKursslut))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnTaBortKurs)
                            .addComponent(btnAndra)
                            .addComponent(btnTomFalt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTillbaka)
                        .addContainerGap())))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tomFalt() {
        // Tömmer fälten till vänster på information.
        txtKursId.setText(null);
        txtKursNamn.setText(null);
        dateKursstart.setDate(null);
        dateKursslut.setDate(null);
    }

    private void fyllListan() {
        // Fyller på listan med alla kurser som finns på Hogwarts.

        kursLista.setText("");

        try {
            ArrayList<String> kursNamn = idb.fetchColumn("SELECT KURSNAMN FROM KURS ORDER BY KURSNAMN ASC;");
            ArrayList<String> kursLarare = idb.fetchColumn("SELECT KURSLARARE FROM KURS ORDER BY KURSNAMN ASC;");
            ArrayList<String> amnesTillhorighet = idb.fetchColumn("SELECT AMNESTILLHORIGHET FROM KURS ORDER BY KURSNAMN ASC;");
            ArrayList<String> kursStart = idb.fetchColumn("SELECT KURSSTART FROM KURS ORDER BY KURSNAMN ASC;");
            ArrayList<String> kursSlut = idb.fetchColumn("SELECT KURSSLUT FROM KURS ORDER BY KURSNAMN ASC;");

            // Loopen går igenom alla kurser och lägger till namnet, läraren, ämnestillhörigheten och datumen i listan.
            for (int i = 0; i < kursNamn.size(); i++) {

                String lararEfternamn = idb.fetchSingle("SELECT EFTERNAMN FROM LARARE JOIN KURS ON LARAR_ID = KURS.KURSLARARE WHERE LARAR_ID = " + kursLarare.get(i));
                String lararFornamn = idb.fetchSingle("SELECT FORNAMN FROM LARARE JOIN KURS ON LARAR_ID = KURS.KURSLARARE WHERE LARAR_ID = " + kursLarare.get(i));
                String amneNamn = idb.fetchSingle("SELECT AMNESNAMN FROM AMNE JOIN KURS ON AMNE_ID = KURS.AMNESTILLHORIGHET WHERE AMNE_ID = " + amnesTillhorighet.get(i));

                kursLista.append("Kurs: " + kursNamn.get(i) + "\n" + lararFornamn + " " + lararEfternamn + "\n" + amneNamn + "\n" + kursStart.get(i) + " -> " + kursSlut.get(i) + "\n\n");
            }

            // Detta gör att startpositionen i listan är i toppen av textfältet.
            kursLista.setSelectionStart(0);
            kursLista.setSelectionEnd(0);

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande:" + e.getMessage());
        }
    }

    private void fyllAmneCombobox() {
        // Denna metod fyller ut dropdown-menyn med de ämnen som finns.

        try {
            ArrayList<HashMap<String, String>> amneslista = idb.fetchRows("SELECT AMNESNAMN FROM AMNE ORDER BY AMNESNAMN ASC;");

            // For-loopen går igenom varje namn som finns i kolumnen AMNESNAMN och lägger till den i dropdown-menyn.  
            for (int i = 0; i < amneslista.size(); i++) {
                cbAmne.addItem(amneslista.get(i).get("AMNESNAMN"));
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande:" + e.getMessage());
        }
    }

    private void fyllLararCombobox() {
        // Denna metod fyller ut dropdown-menyn med de lärare som finns.

        try {
            ArrayList<HashMap<String, String>> lararListaE = idb.fetchRows("SELECT EFTERNAMN FROM LARARE ORDER BY EFTERNAMN ASC;");
            ArrayList<HashMap<String, String>> lararListaF = idb.fetchRows("SELECT FORNAMN FROM LARARE ORDER BY EFTERNAMN ASC;");

            // For-loopen går igenom varje namn som finns i kolumnen FORNAMN och lägger till den i dropdown-menyn.     
            for (int i = 0; i < lararListaE.size(); i++) {

                // Lägger ihop förnamn och efternamn till en gemensam variabel och lägger till den i dropdown-menyn.
                String lararNamn = lararListaF.get(i).get("FORNAMN") + " " + lararListaE.get(i).get("EFTERNAMN");
                cbLarare.addItem(lararNamn);
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande:" + e.getMessage());
        }
    }

    private void fyllKursCombobox() {
        // Denna metod fyller ut dropdown-menyn med de kurser som finns.

        try {
            ArrayList<HashMap<String, String>> kurslista = idb.fetchRows("SELECT KURSNAMN FROM KURS ORDER BY KURSNAMN ASC;");

            // For-loopen går igenom varje namn som finns i kolumnen KURSANMN och lägger till den i dropdown-menyn.
            for (int i = 0; i < kurslista.size(); i++) {
                cbValjKurs.addItem(kurslista.get(i).get("KURSNAMN"));
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande:" + e.getMessage());
        }
    }

    private void btnRegistreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistreraActionPerformed
        // Denna metod öppnar en sida där användaren kan lägga till kurser.
        LaggTillKurs laggtillkurssidan = new LaggTillKurs(idb);
        laggtillkurssidan.setVisible(true);
    }//GEN-LAST:event_btnRegistreraActionPerformed

    private void btnTillbakaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTillbakaMouseClicked
        // Metoden stänger denna sida och går tillbaka till huvudsidan för admins.
        setVisible(false);
        Huvudsida_admin adminsidan = new Huvudsida_admin(idb);
        adminsidan.setVisible(true);
    }//GEN-LAST:event_btnTillbakaMouseClicked

    private void btnSokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSokActionPerformed
        // Tar fram information om den kursen användaren väljer att söka efter.

        String valdKurs = cbValjKurs.getSelectedItem().toString();

        try {

            String kursId = idb.fetchSingle("SELECT KURS_ID FROM KURS where KURSNAMN='" + valdKurs + "'");
            txtKursId.setText(kursId);

            String kursNamn = idb.fetchSingle("SELECT KURSNAMN FROM KURS where KURSNAMN='" + valdKurs + "'");
            txtKursNamn.setText(kursNamn);

            String amneId = idb.fetchSingle("SELECT AMNESTILLHORIGHET FROM KURS WHERE KURSNAMN='" + valdKurs + "'");
            String amnesNamn = idb.fetchSingle("SELECT AMNESNAMN FROM AMNE WHERE AMNE_ID='" + amneId + "'");
            cbAmne.setSelectedItem(amnesNamn);

            String lararId = idb.fetchSingle("SELECT KURSLARARE FROM KURS WHERE KURSNAMN='" + valdKurs + "'");
            String lararnamnet = idb.fetchSingle("SELECT EFTERNAMN FROM LARARE WHERE LARAR_ID='" + lararId + "'");
            cbLarare.setSelectedItem(lararnamnet);

            String kursStart = idb.fetchSingle("SELECT KURSSTART FROM KURS where KURSNAMN='" + valdKurs + "'");
            String kursSlut = idb.fetchSingle("SELECT KURSSLUT FROM KURS where KURSNAMN='" + valdKurs + "'");

            // Formaterar datumen som kommer från databasen från datatypen String till Date så de kan läggas in i datumväljaren.
            SimpleDateFormat formatering = new SimpleDateFormat("yyyy-MM-dd");
            Date datumStart = formatering.parse(kursStart);
            dateKursstart.setDate(datumStart);
            Date datumSlut = formatering.parse(kursSlut);
            dateKursslut.setDate(datumSlut);

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande:" + e.getMessage());
        } catch (ParseException ex) {
            Logger.getLogger(Kurser_admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSokActionPerformed

    private void btnAndraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAndraActionPerformed
        // Ändrar information om kursen som användaren sökt fram.

        // Dessa ser till att samtliga textfält och datumfält inte är tomma när användaren klickar på "Ändra" knappen.
        if (Validering.Kolla2TommaFalt(txtKursId, txtKursNamn)) {
            if (Validering.KollaTommaDatum(dateKursstart, dateKursslut)) {

                int kursId = Integer.parseInt(txtKursId.getText());
                String kursnamn = txtKursNamn.getText();
                String amne = cbAmne.getSelectedItem().toString();
                String larare = cbLarare.getSelectedItem().toString();
                // En Array skapas för att dela på namnet till två substringar (förnamn och efternamn).
                String[] fornamnefternamn = larare.split(" ");

                // Formatterar datumen från datatypen Date till string så de kan läggas in i databasen.
                SimpleDateFormat formatering = new SimpleDateFormat("yyyy-MM-dd");
                String startdatum = formatering.format(dateKursstart.getDate());
                String slutdatum = formatering.format(dateKursslut.getDate());

                try {
                    idb.update("UPDATE KURS SET KURSNAMN = '" + kursnamn + "' WHERE KURS_ID =" + kursId);

                    // Tar fram lärarens ID så det kan läggas in i databastabellen.
                    int lararId = Integer.parseInt(idb.fetchSingle("SELECT LARAR_ID FROM LARARE WHERE FORNAMN='" + fornamnefternamn[0] + "' and EFTERNAMN='" + fornamnefternamn[1] + "'"));
                    idb.update("UPDATE KURS SET KURSLARARE = " + lararId + " WHERE KURS_ID =" + kursId);

                    // Tar fram ämnets ID så det kan läggas in i databastabellen.
                    int amneId = Integer.parseInt(idb.fetchSingle("SELECT AMNE_ID FROM AMNE WHERE AMNESNAMN = '" + amne + "'"));
                    idb.update("UPDATE KURS SET AMNESTILLHORIGHET = " + amneId + " WHERE KURS_ID =" + kursId);

                    idb.update("UPDATE KURS SET KURSSTART = '" + startdatum + "' WHERE KURS_ID =" + kursId);
                    idb.update("UPDATE KURS SET KURSSLUT = '" + slutdatum + "' WHERE KURS_ID =" + kursId);

                    JOptionPane.showMessageDialog(null, "Ändrat!");

                } catch (InfException e) {
                    JOptionPane.showMessageDialog(null, "Se till att du valt en kurs och fyllt i all information!");
                    System.out.println("Internt felmeddelande:" + e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_btnAndraActionPerformed

    private void btnTaBortKursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortKursActionPerformed
        // Tar bort kursen som man sökt fram om man klickar ja i rutan som dyker upp och frågar om man är säker.

        // Detta ser till att fältet med kursens ID inte är tomt, för det betyder att det inte finns någon kurs att ta bort.
        if (Validering.KollaTomtFalt(txtKursId)) {

            int kursId = Integer.parseInt(txtKursId.getText());
            int input = JOptionPane.showConfirmDialog(null, "Är du säker på att du vill ta bort kursen?", "Ta bort kurs..", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            // Värdet 0 motsvarar "YES" i dialogrutan.
            if (input == 0) {
                try {
                    // Kollar om det finns några elever som har betyg i kursen som användaren planerar på att ta bort.
                    ArrayList<String> finnsKursBetyg = idb.fetchColumn("SELECT KURS_ID FROM HAR_BETYG_I WHERE KURS_ID =" + kursId);

                    if (Validering.KollaOmInnehallFinns(finnsKursBetyg)) {

                        // Om det finns betyg i kursen kommer användaren få frågan om den fortfarande vill ta bort kursen.
                        int input2 = JOptionPane.showConfirmDialog(null, "Det finns elever som har betyg i denna kurs.\n Vill du ta bort den ändå och ta bort betygen?", "Ta bort kurs..", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                        // Värdet 0 motsvarar "YES" i dialogrutan.
                        if (input2 == 0) {

                            // Först tas kursID bort från alla tabeller den kan vara främmande nyckel i, och slutligen i kurstabellen.
                            idb.delete("DELETE FROM HAR_BETYG_I WHERE KURS_ID =" + kursId);
                            idb.delete("DELETE FROM REGISTRERAD_PA WHERE KURS_ID =" + kursId);
                            idb.delete("DELETE FROM KURS WHERE KURS_ID =" + kursId);
                            JOptionPane.showMessageDialog(null, "Kursen har tagits bort!");
                            tomFalt();
                        }
                        
                    // Om det inte finns betyg i kursen kommer inte den extra frågan ställas utan den tas bort med en gång.    
                    } else {
                        idb.delete("DELETE FROM HAR_BETYG_I WHERE KURS_ID =" + kursId);
                        idb.delete("DELETE FROM REGISTRERAD_PA WHERE KURS_ID =" + kursId);
                        idb.delete("DELETE FROM KURS WHERE KURS_ID =" + kursId);
                        JOptionPane.showMessageDialog(null, "Kursen har tagits bort!");
                        tomFalt();
                    }

                } catch (InfException e) {
                    JOptionPane.showMessageDialog(null, "Något gick fel!");
                    System.out.println("Internt felmeddelande:" + e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_btnTaBortKursActionPerformed

    private void btnUppdateraKurslistaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUppdateraKurslistaActionPerformed
        // Uppdaterar kurslistan, både i dropdown-menyn och i listan.
        cbValjKurs.removeAllItems();
        fyllKursCombobox();
        fyllListan();
    }//GEN-LAST:event_btnUppdateraKurslistaActionPerformed

    private void btnTomFaltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTomFaltActionPerformed
        // Tömmer alla fält på information när användaren klickar på "Töm fält" knappen.
        tomFalt();
        kursLista.setText("");
    }//GEN-LAST:event_btnTomFaltActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAndra;
    private javax.swing.JButton btnRegistrera;
    private javax.swing.JButton btnSok;
    private javax.swing.JButton btnTaBortKurs;
    private javax.swing.JLabel btnTillbaka;
    private javax.swing.JButton btnTomFalt;
    private javax.swing.JButton btnUppdateraKurslista;
    private javax.swing.JComboBox<String> cbAmne;
    private javax.swing.JComboBox<String> cbLarare;
    private javax.swing.JComboBox<String> cbValjKurs;
    private org.jdesktop.swingx.JXDatePicker dateKursslut;
    private org.jdesktop.swingx.JXDatePicker dateKursstart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea kursLista;
    private javax.swing.JLabel lbAmne;
    private javax.swing.JLabel lbKursId;
    private javax.swing.JLabel lbKursNamn;
    private javax.swing.JLabel lbKursslut;
    private javax.swing.JLabel lbKursstart;
    private javax.swing.JLabel lbLarare;
    private javax.swing.JLabel lbSubRubrik;
    private javax.swing.JLabel lbValjKurs;
    private javax.swing.JPanel panelTitel;
    private javax.swing.JTextField txtKursId;
    private javax.swing.JTextField txtKursNamn;
    // End of variables declaration//GEN-END:variables
}
