
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/*
 * Denna sida öppnas när en lärare eller admin vill registrera ett nytt betyg för en elev.
 * Här registrar användaren betyg genom att fylla i all information och klicka på registrera-knappen.
 *
 * @author Elinore Hagman
 */
public class LaggTillBetyg extends javax.swing.JFrame {

    private InfDB idb;

    // Creates new form LaggTillBetyg
    public LaggTillBetyg(InfDB idb) {
        initComponents();
        this.idb = idb;

        // Dessa metoder anropar när sidan öppnas och fyller på innehåll i dropdown-menyerna.
        fyllElevCombobox();
        fyllKursCombobox();
        fyllBetygCombobox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTitel = new javax.swing.JPanel();
        lbRubrik = new javax.swing.JLabel();
        lbBetyg = new javax.swing.JLabel();
        btnRegistrera = new javax.swing.JButton();
        lbKursnamn = new javax.swing.JLabel();
        lbElev = new javax.swing.JLabel();
        btnTillbaka = new javax.swing.JLabel();
        cbBetyg = new javax.swing.JComboBox<>();
        cbElev = new javax.swing.JComboBox<>();
        cbKurs = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        panelTitel.setBackground(new java.awt.Color(204, 204, 204));

        lbRubrik.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        lbRubrik.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbRubrik.setText("Registrera nytt betyg");

        javax.swing.GroupLayout panelTitelLayout = new javax.swing.GroupLayout(panelTitel);
        panelTitel.setLayout(panelTitelLayout);
        panelTitelLayout.setHorizontalGroup(
            panelTitelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbRubrik, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelTitelLayout.setVerticalGroup(
            panelTitelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lbRubrik)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        lbBetyg.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbBetyg.setText("Betyg:");

        btnRegistrera.setText("Registrera");
        btnRegistrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistreraActionPerformed(evt);
            }
        });

        lbKursnamn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbKursnamn.setText("Kursnamn:");

        lbElev.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbElev.setText("Elev:");

        btnTillbaka.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Bilder/icons8-go-back-24.png"))); // NOI18N
        btnTillbaka.setText("Gå tillbaka");
        btnTillbaka.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTillbakaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTitel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbBetyg)
                            .addComponent(lbKursnamn)
                            .addComponent(lbElev))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(cbElev, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(cbKurs, javax.swing.GroupLayout.Alignment.LEADING, 0, 170, Short.MAX_VALUE)
                                        .addComponent(cbBetyg, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(btnRegistrera, javax.swing.GroupLayout.Alignment.TRAILING)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnTillbaka)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panelTitel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbElev)
                    .addComponent(cbElev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbKurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbKursnamn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbBetyg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbBetyg))
                .addGap(18, 18, 18)
                .addComponent(btnRegistrera)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTillbaka)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void fyllKursCombobox() {
        // Denna metod fyller ut dropdown-menyn med de kurser som finns.

        try {
            ArrayList<HashMap<String, String>> allaKurser = idb.fetchRows("SELECT KURSNAMN FROM KURS");

            // Loopen går igenom varje namn som finns i kolumnen KURSNAMN och lägger till den i dropdown-menyn.
            for (int i = 0; i < allaKurser.size(); i++) {
                cbKurs.addItem(allaKurser.get(i).get("KURSNAMN"));
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande:" + e.getMessage());
        }
    }

    private void fyllElevCombobox() {
        // Denna metod fyller ut dropdown-menyn med de elever som finns.

        try {
            ArrayList<HashMap<String, String>> fornamnLista = idb.fetchRows("SELECT FORNAMN FROM ELEV ORDER BY EFTERNAMN ASC");
            ArrayList<HashMap<String, String>> efternamnLista = idb.fetchRows("SELECT EFTERNAMN FROM ELEV ORDER BY EFTERNAMN ASC");

            // For-loopen går igenom varje namn som finns i kolumnen EFTERNAMN och lägger till den i dropdown-menyn.
            for (int i = 0; i < efternamnLista.size(); i++) {

                // Gör en variabel där både förnamnet och efternamnet på läraren lagras och lägger in det i dropdown-menyn.
                String eleven = fornamnLista.get(i).get("FORNAMN") + " " + efternamnLista.get(i).get("EFTERNAMN");
                cbElev.addItem(eleven);
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande:" + e.getMessage());
        }
    }

    private void fyllBetygCombobox() {
        // Denna metod fyller ut dropdown-menyn med de betyg som finns.

        try {
            ArrayList<HashMap<String, String>> betygLista = idb.fetchRows("SELECT BETYGSBETECKNING FROM BETYG");

            // For-loopen går igenom varje namn som finns i kolumnen BETYGSBETECKNING och lägger till den i dropdown-menyn.
            for (int i = 0; i < betygLista.size(); i++) {
                cbBetyg.addItem(betygLista.get(i).get("BETYGSBETECKNING"));
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande:" + e.getMessage());
        }
    }

    private void btnRegistreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistreraActionPerformed
        // Registrerar betyget i kursen på eleven som valts i dropdown-menyn.

        String eleven = cbElev.getSelectedItem().toString();
        String kursnamn = cbKurs.getSelectedItem().toString();
        String betyget = cbBetyg.getSelectedItem().toString();

        //Skapar en Array som delar upp namnet i två substringar (förnamn och efternamn).
        String[] fornamnefternamn = eleven.split(" ");

        try {
            String elevId = idb.fetchSingle("SELECT ELEV_ID FROM ELEV WHERE FORNAMN='" + fornamnefternamn[0] + "' and EFTERNAMN='" + fornamnefternamn[1] + "'");
            String kursId = idb.fetchSingle("SELECT KURS_ID FROM KURS WHERE KURSNAMN = '" + kursnamn + "'");

            // Kollar om det finns något betyg i kursen för eleven som användaren valt att registrera betyg för.
            String finnsBetyget = idb.fetchSingle("SELECT ELEV_ID FROM HAR_BETYG_I WHERE KURS_ID = " + kursId + " AND ELEV_ID =" + elevId);

            if (finnsBetyget == null) {
                idb.insert("INSERT INTO HAR_BETYG_I VALUES (" + elevId + ", " + kursId + ", '" + betyget + "')");

                String finnsKursRegistrerad = idb.fetchSingle("SELECT KURS_ID FROM REGISTRERAD_PA WHERE KURS_ID = " + kursId + " AND ELEV_ID =" + elevId);

                if (finnsKursRegistrerad == null) {
                    idb.insert("INSERT INTO REGISTRERAD_PA VALUES (" + elevId + ", " + kursId + ")");
                }
                    JOptionPane.showMessageDialog(null, "Betyget för " + eleven + " har registrerats!");
                
            } else {
                JOptionPane.showMessageDialog(null, eleven + " har redan betyg i denna kurs. \n Vill du ändra betyget kan du göra det på föregående sida.");
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande:" + e.getMessage());
        }
    }//GEN-LAST:event_btnRegistreraActionPerformed

    private void btnTillbakaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTillbakaMouseClicked
        // Metoden stänger ner denna sida.
        setVisible(false);
    }//GEN-LAST:event_btnTillbakaMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegistrera;
    private javax.swing.JLabel btnTillbaka;
    private javax.swing.JComboBox<String> cbBetyg;
    private javax.swing.JComboBox<String> cbElev;
    private javax.swing.JComboBox<String> cbKurs;
    private javax.swing.JLabel lbBetyg;
    private javax.swing.JLabel lbElev;
    private javax.swing.JLabel lbKursnamn;
    private javax.swing.JLabel lbRubrik;
    private javax.swing.JPanel panelTitel;
    // End of variables declaration//GEN-END:variables
}
