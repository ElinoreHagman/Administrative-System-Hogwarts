
import com.sun.glass.ui.Cursor;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/*
 * Denna sida hanterar elevinformation och användaren kan se vilka som är prefekter,
 * lista alla Hogwarts elever, eller elever utifrån ett specifikt elevhem.
 *
 * @author Elinore Hagman
 */
public class Elever_elev extends javax.swing.JFrame {

    private InfDB idb;

    // Creates new form Elever_elev
    public Elever_elev(InfDB idb) {
        initComponents();
        this.idb = idb;

        // Denna metod anropas när sidan öppnas och fyller dropdown-menyn med elevhemmen.
        fyllElevhemCombobox();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RubrikBakgrund = new javax.swing.JPanel();
        lbRubrik = new javax.swing.JLabel();
        iconelev = new javax.swing.JLabel();
        lbelevhem = new javax.swing.JLabel();
        btnsok = new javax.swing.JButton();
        cbelevhem = new javax.swing.JComboBox<>();
        lbListaElever = new javax.swing.JLabel();
        Goback = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        elevlistan = new javax.swing.JTextArea();
        listaAlla = new javax.swing.JButton();
        txttitel = new javax.swing.JLabel();
        btnprefekt = new javax.swing.JButton();
        lbInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        RubrikBakgrund.setBackground(new java.awt.Color(204, 204, 204));

        lbRubrik.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        lbRubrik.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbRubrik.setText("Elevinformation");

        iconelev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Bilder/icons8-graduate-filled-50.png"))); // NOI18N

        javax.swing.GroupLayout RubrikBakgrundLayout = new javax.swing.GroupLayout(RubrikBakgrund);
        RubrikBakgrund.setLayout(RubrikBakgrundLayout);
        RubrikBakgrundLayout.setHorizontalGroup(
            RubrikBakgrundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RubrikBakgrundLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(iconelev)
                .addGap(28, 28, 28)
                .addComponent(lbRubrik, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(105, Short.MAX_VALUE))
        );
        RubrikBakgrundLayout.setVerticalGroup(
            RubrikBakgrundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RubrikBakgrundLayout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(RubrikBakgrundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(iconelev, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbRubrik, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        lbelevhem.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbelevhem.setText("Elevhem:");

        btnsok.setText("Sök");
        btnsok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsokActionPerformed(evt);
            }
        });

        lbListaElever.setFont(new java.awt.Font("Lucida Grande", 2, 14)); // NOI18N
        lbListaElever.setText("Lista elever utifrån elevhem");

        Goback.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Bilder/icons8-go-back-24.png"))); // NOI18N
        Goback.setText("Gå tillbaka");
        Goback.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GobackMouseClicked(evt);
            }
        });

        elevlistan.setEditable(false);
        elevlistan.setColumns(20);
        elevlistan.setRows(5);
        jScrollPane2.setViewportView(elevlistan);

        listaAlla.setText("Lista alla elever på skolan");
        listaAlla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaAllaActionPerformed(evt);
            }
        });

        txttitel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N

        btnprefekt.setText("Lista alla prefekter");
        btnprefekt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprefektActionPerformed(evt);
            }
        });

        lbInfo.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        lbInfo.setText("Om det finns många elever på skolan kan det ta en stund att ladda fram listan.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(RubrikBakgrund, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbListaElever)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbelevhem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnsok, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(listaAlla, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnprefekt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbelevhem, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Goback)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txttitel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
                    .addComponent(lbInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(RubrikBakgrund, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(txttitel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbListaElever)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbelevhem)
                            .addComponent(cbelevhem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnsok)
                        .addGap(21, 21, 21)
                        .addComponent(btnprefekt, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(listaAlla, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(Goback))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lbInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void fyllElevhemCombobox() {
        // Metoden hämtar elevhemsnamnen från databasen och fyller dropdown-menyn med dem.

        try {
            ArrayList<HashMap<String, String>> elevhemLista = idb.fetchRows("SELECT ELEVHEMSNAMN FROM ELEVHEM");
            for (int i = 0; i < elevhemLista.size(); i++) {
                cbelevhem.addItem(elevhemLista.get(i).get("ELEVHEMSNAMN"));
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande:" + e.getMessage());
        }
    }

    private void btnsokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsokActionPerformed
    // Listar alla elever utifrån elevhemmet användaren fyllt in i dropdown-menyn.

        // Detta tar bort det som finns i högra textfältet och gör så inte textfältet som visar listan upprepar flera listor på varandra.
        elevlistan.setText("");

        String elevhemmet = cbelevhem.getSelectedItem().toString();
        txttitel.setText("Alla elever som tillhör elevhemmet " + elevhemmet + "");

        try {
            ArrayList<String> fornamnLista = idb.fetchColumn("SELECT FORNAMN FROM ELEVHEM JOIN SOVSAL ON ELEVHEM_ID = SOVSAL.ELEVHEM JOIN ELEV ON SOVSAL_ID = ELEV.SOVSAL WHERE ELEVHEMSNAMN = '" + elevhemmet + "' ORDER BY SOVSAL, EFTERNAMN ASC");
            ArrayList<String> efternamnLista = idb.fetchColumn("SELECT EFTERNAMN FROM ELEVHEM JOIN SOVSAL ON ELEVHEM_ID = SOVSAL.ELEVHEM JOIN ELEV ON SOVSAL_ID = ELEV.SOVSAL WHERE ELEVHEMSNAMN = '" + elevhemmet + "' ORDER BY SOVSAL, EFTERNAMN ASC");

            for (int i = 0; i < fornamnLista.size(); i++) {
                String sovsalen = idb.fetchSingle("SELECT SOVSAL FROM ELEVHEM JOIN SOVSAL ON ELEVHEM_ID = SOVSAL.ELEVHEM JOIN ELEV ON SOVSAL_ID = ELEV.SOVSAL WHERE ELEVHEMSNAMN = '" + elevhemmet + "' AND FORNAMN = '" + fornamnLista.get(i) + "' AND EFTERNAMN = '" + efternamnLista.get(i) + "'");
                String elevId = idb.fetchSingle("SELECT ELEV_ID FROM ELEV WHERE FORNAMN = '" + fornamnLista.get(i) + "' AND EFTERNAMN = '" + efternamnLista.get(i) + "'");
                int elevIdInt = Integer.parseInt(elevId);

                // Kollar om eleverna var för sig är representerade som prefekt i elevhemmet ifråga.
                String prefektstatus = idb.fetchSingle("SELECT PREFEKT FROM ELEVHEM JOIN SOVSAL ON ELEVHEM_ID = SOVSAL.ELEVHEM JOIN ELEV ON SOVSAL_ID = ELEV.SOVSAL WHERE PREFEKT = " + elevIdInt);

                // Om den enskilda eleven är prefekt kommer en extra rad skrivas in bredvid namnet på eleven ifråga.
                if (prefektstatus != null) {
                    elevlistan.append("Namn: " + fornamnLista.get(i) + " " + efternamnLista.get(i) + " *PREFEKT*\nSovsal: " + sovsalen + "\n\n");

                // Om eleven inte är prefekt kommer ordet *PREFEKT* inte skrivas med i den enskilde elevens information.
                } else {
                    elevlistan.append("Namn: " + fornamnLista.get(i) + " " + efternamnLista.get(i) + "\nSovsal: " + sovsalen + "\n\n");
                }
            }

            // Detta gör att startpositionen i listan är i toppen av textfältet istället för längst ner.
            elevlistan.setSelectionStart(0);
            elevlistan.setSelectionEnd(0);

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande:" + e.getMessage());
        }
    }//GEN-LAST:event_btnsokActionPerformed

    private void GobackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GobackMouseClicked
        // Stänger denna sida och går tillbaka till huvudsidan för elever.
        setVisible(false);
        Huvudsida_elev elevsidan = new Huvudsida_elev(idb);
        elevsidan.setVisible(true);
    }//GEN-LAST:event_GobackMouseClicked

    private void listaAllaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaAllaActionPerformed
    // Metoden fyller listan med alla elever som går på Hogwarts.

        // Detta tar bort det som finns i högra textfältet och gör så inte textfältet som visar listan upprepar flera listor på varandra.
        elevlistan.setText("");

        try {
            ArrayList<String> fornamnLista = idb.fetchColumn("SELECT FORNAMN FROM ELEV ORDER BY SOVSAL, EFTERNAMN ASC");
            ArrayList<String> efternamnLista = idb.fetchColumn("SELECT EFTERNAMN FROM ELEV ORDER BY SOVSAL, EFTERNAMN ASC");
            ArrayList<String> sovsalLista = idb.fetchColumn("SELECT SOVSAL FROM ELEV ORDER BY SOVSAL, EFTERNAMN ASC");

            txttitel.setText("Alla elever på Hogwarts");

            // Loopen går igenom alla namn och lägger till förnamn, efternamn, elevhem och sovsal i listan.
            for (int i = 0; i < fornamnLista.size(); i++) {

                String elevhem = idb.fetchSingle("SELECT ELEVHEMSNAMN FROM ELEVHEM JOIN SOVSAL ON ELEVHEM_ID = SOVSAL.ELEVHEM JOIN ELEV ON SOVSAL_ID = ELEV.SOVSAL WHERE ELEV.FORNAMN = '" + fornamnLista.get(i) + "'");

                String elevId = idb.fetchSingle("SELECT ELEV_ID FROM ELEV WHERE FORNAMN = '" + fornamnLista.get(i) + "' AND EFTERNAMN = '" + efternamnLista.get(i) + "'");
                int elevIdInt = Integer.parseInt(elevId);

                // Kollar om eleverna var för sig är representerade som prefekt i elevhemmet ifråga.
                String prefektstatus = idb.fetchSingle("SELECT PREFEKT FROM ELEVHEM JOIN SOVSAL ON ELEVHEM_ID = SOVSAL.ELEVHEM JOIN ELEV ON SOVSAL_ID = ELEV.SOVSAL WHERE PREFEKT = " + elevIdInt);

                // Om eleven är prefekt kommer en extra rad skrivas in bredvid namnet på eleven ifråga.
                if (prefektstatus != null) {
                    elevlistan.append("Namn: " + fornamnLista.get(i) + " " + efternamnLista.get(i) + " *PREFEKT*\nElevhem: " + elevhem + "\nSovsal: " + sovsalLista.get(i) + "\n\n");

                // Om eleven inte är prefekt kommer ordet *prefekt* inte skrivas med i den enskilde elevens information.
                } else {
                    elevlistan.append("Namn: " + fornamnLista.get(i) + " " + efternamnLista.get(i) + "\nElevhem: " + elevhem + "\nSovsal: " + sovsalLista.get(i) + "\n\n");
                }
            }

            // Detta gör att startpositionen i listan är i toppen av textfältet.
            elevlistan.setSelectionStart(0);
            elevlistan.setSelectionEnd(0);

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande:" + e.getMessage());
        }
    }//GEN-LAST:event_listaAllaActionPerformed

    private void btnprefektActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprefektActionPerformed
        // Metoden fyller listan med de prefekter som finns på Hogwarts.

        elevlistan.setText("");

        try {
            ArrayList<String> fornamnLista = idb.fetchColumn("SELECT FORNAMN FROM ELEV JOIN SOVSAL ON SOVSAL_ID = ELEV.SOVSAL JOIN ELEVHEM ON ELEVHEM_ID = SOVSAL.ELEVHEM WHERE PREFEKT = ELEV_ID");
            ArrayList<String> efternamnLista = idb.fetchColumn("SELECT EFTERNAMN FROM ELEV JOIN SOVSAL ON SOVSAL_ID = ELEV.SOVSAL JOIN ELEVHEM ON ELEVHEM_ID = SOVSAL.ELEVHEM WHERE PREFEKT = ELEV_ID");

            if (Validering.KollaOmInnehallFinns(fornamnLista)) {
                txttitel.setText("Alla prefekter på Hogwarts");
                for (int i = 0; i < fornamnLista.size(); i++) {

                    //Kollar vilket elevhem respektive elev tillhör och skriver ut det tillsammans med namn och efternamn.
                    String elevhem = idb.fetchSingle("SELECT ELEVHEMSNAMN FROM ELEVHEM JOIN SOVSAL ON ELEVHEM_ID = SOVSAL.ELEVHEM JOIN ELEV ON SOVSAL_ID = ELEV.SOVSAL WHERE ELEV.FORNAMN = '" + fornamnLista.get(i) + "' AND ELEV.EFTERNAMN = '" + efternamnLista.get(i) + "'");
                    elevlistan.append("Namn: " + fornamnLista.get(i) + " " + efternamnLista.get(i) + "\nElevhem: " + elevhem + "\n\n");
                }

            } else {
                txttitel.setText("Det finns inga prefekter på Hogwarts!");
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande:" + e.getMessage());
        }
    }//GEN-LAST:event_btnprefektActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Goback;
    private javax.swing.JPanel RubrikBakgrund;
    private javax.swing.JButton btnprefekt;
    private javax.swing.JButton btnsok;
    private javax.swing.JComboBox<String> cbelevhem;
    private javax.swing.JTextArea elevlistan;
    private javax.swing.JLabel iconelev;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbInfo;
    private javax.swing.JLabel lbListaElever;
    private javax.swing.JLabel lbRubrik;
    private javax.swing.JLabel lbelevhem;
    private javax.swing.JButton listaAlla;
    private javax.swing.JLabel txttitel;
    // End of variables declaration//GEN-END:variables
}
