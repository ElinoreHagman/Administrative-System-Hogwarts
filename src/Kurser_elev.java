
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/*
 * Denna sida hanterar kursinformation för elever. De kan kolla vilka kurser vilka lärare håller, eller
 * kolla vilka kurser en elev är registrerad på.
 *
 * @author Elinore Hagman
 */
public class Kurser_elev extends javax.swing.JFrame {

    private InfDB idb;

    // Creates new form Kurser_elev
    public Kurser_elev(InfDB idb) {
        initComponents();
        this.idb = idb;

        // Denna metod anropas när sidan öppnas och fyller dropdown-menyn med lärare.
        fyllLararComboBox();
        dateStartdatum.setVisible(false);
        dateSlutdatum.setVisible(false);

        // Sätter formatet på datumfälten till det format som databasen använder sig av.
        dateStartdatum.setFormats("yyyy-MM-dd");
        dateSlutdatum.setFormats("yyyy-MM-dd");
        
        /* Koden nedan fyller datumväljarna på sidan med ett random datum så de inte är tomma och får sidan att krascha
         * när användaren söker lärare utan att välja mellan två datum (vilket innebär att datumväljarna dolda).
         */
        try {
            SimpleDateFormat formatering = new SimpleDateFormat("yyyy-MM-dd");
            Date defaultDatum = formatering.parse("2019-05-01");
            dateStartdatum.setDate(defaultDatum);
            dateSlutdatum.setDate(defaultDatum);

        } catch (ParseException ex) {
            Logger.getLogger(Kurser_elev.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTitel = new javax.swing.JPanel();
        lbRubrik = new javax.swing.JLabel();
        iconElever = new javax.swing.JLabel();
        lbValjLarare = new javax.swing.JLabel();
        btnSokLarare = new javax.swing.JButton();
        cbLarare = new javax.swing.JComboBox<>();
        lbKollaKurser = new javax.swing.JLabel();
        txtFornamn = new javax.swing.JTextField();
        txtEfternamn = new javax.swing.JTextField();
        txtElevId = new javax.swing.JTextField();
        lbFornamn = new javax.swing.JLabel();
        lbSokKurserEfterElev = new javax.swing.JLabel();
        lbEfternamn = new javax.swing.JLabel();
        lbElevId = new javax.swing.JLabel();
        btnTillbaka = new javax.swing.JLabel();
        lbTips = new javax.swing.JLabel();
        btnSokElev = new javax.swing.JButton();
        JScrollPane = new javax.swing.JScrollPane();
        kursLista = new javax.swing.JTextArea();
        TomFalt = new javax.swing.JButton();
        dateSlutdatum = new org.jdesktop.swingx.JXDatePicker();
        dateStartdatum = new org.jdesktop.swingx.JXDatePicker();
        btnMellanDatum = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelTitel.setBackground(new java.awt.Color(204, 204, 204));

        lbRubrik.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        lbRubrik.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbRubrik.setText("Kursinformation");

        iconElever.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Bilder/icons8_literature_filled_50px.png"))); // NOI18N

        javax.swing.GroupLayout panelTitelLayout = new javax.swing.GroupLayout(panelTitel);
        panelTitel.setLayout(panelTitelLayout);
        panelTitelLayout.setHorizontalGroup(
            panelTitelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitelLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(iconElever)
                .addGap(28, 28, 28)
                .addComponent(lbRubrik, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );
        panelTitelLayout.setVerticalGroup(
            panelTitelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(panelTitelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbRubrik, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(iconElever, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        lbValjLarare.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbValjLarare.setText("Välj lärare:");

        btnSokLarare.setText("Sök");
        btnSokLarare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSokLarareActionPerformed(evt);
            }
        });

        lbKollaKurser.setFont(new java.awt.Font("Lucida Grande", 2, 14)); // NOI18N
        lbKollaKurser.setText("Kolla vilka kurser en lärare leder");

        lbFornamn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbFornamn.setText("Förnamn:");

        lbSokKurserEfterElev.setFont(new java.awt.Font("Lucida Grande", 2, 14)); // NOI18N
        lbSokKurserEfterElev.setText("Kolla kurser en elev är registrerad på");

        lbEfternamn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbEfternamn.setText("Efternamn:");

        lbElevId.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbElevId.setText("ID:");

        btnTillbaka.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Bilder/icons8-go-back-24.png"))); // NOI18N
        btnTillbaka.setText("Gå tillbaka");
        btnTillbaka.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTillbakaMouseClicked(evt);
            }
        });

        lbTips.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N

        btnSokElev.setText("Sök");
        btnSokElev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSokElevActionPerformed(evt);
            }
        });

        kursLista.setEditable(false);
        kursLista.setColumns(20);
        kursLista.setRows(5);
        JScrollPane.setViewportView(kursLista);

        TomFalt.setText("Töm fält");
        TomFalt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TomFaltActionPerformed(evt);
            }
        });

        btnMellanDatum.setText("Mellan två datum?");
        btnMellanDatum.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btnMellanDatumItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTitel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnTillbaka)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnMellanDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(lbKollaKurser, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addComponent(lbValjLarare)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(cbLarare, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(6, 6, 6)))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnSokLarare, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbSokKurserEfterElev)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lbFornamn)
                                                    .addComponent(lbEfternamn)
                                                    .addComponent(lbElevId))
                                                .addGap(20, 20, 20)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtEfternamn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtFornamn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtElevId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(12, 12, 12)
                                                .addComponent(btnSokElev, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(6, 6, 6))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(dateStartdatum, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateSlutdatum, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TomFalt, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbTips, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(JScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panelTitel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(lbTips, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbKollaKurser)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbValjLarare)
                            .addComponent(cbLarare, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSokLarare))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMellanDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dateSlutdatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateStartdatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addComponent(lbSokKurserEfterElev)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFornamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbFornamn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEfternamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbEfternamn)
                            .addComponent(btnSokElev))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtElevId, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbElevId))))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(btnTillbaka, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(TomFalt))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void fyllLararComboBox() {
        // Metoden hämtar elevhemsnamnen från databasen och fyller dropdown-menyn med dem.

        try {
            ArrayList<HashMap<String, String>> fornamnLista = idb.fetchRows("SELECT FORNAMN FROM LARARE ORDER BY EFTERNAMN ASC");
            ArrayList<HashMap<String, String>> efternamnLista = idb.fetchRows("SELECT EFTERNAMN FROM LARARE ORDER BY EFTERNAMN ASC");

            for (int i = 0; i < efternamnLista.size(); i++) {

                // En variabel som innehåller både förnam och efternamn på läraren skapas och är den som läggs in i dropdown-menyn.
                String lararNamn = fornamnLista.get(i).get("FORNAMN") + " " + efternamnLista.get(i).get("EFTERNAMN");
                cbLarare.addItem(lararNamn);
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande:" + e.getMessage());
        }
    }

    private void btnSokLarareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSokLarareActionPerformed
        // Tar fram alla kurser en lärare håller.

        kursLista.setText("");
        boolean SkaDatumValjas = btnMellanDatum.isSelected();

        // Ser till att datumväljarna inte är tomma när användaren söker kurser en särskild lärare håller.
        if (Validering.KollaTommaDatum(dateSlutdatum, dateSlutdatum)) {

            // En Array skapas för att lagra namnet på läraren i 2 substringar (förnamn och efternamn).
            String valdLarare = cbLarare.getSelectedItem().toString();
            String[] fornamnefternamn = valdLarare.split(" ");

            // Formatterar datumen från datatypen Date till string så de kan användas mot databasen.
            SimpleDateFormat formatering = new SimpleDateFormat("yyyy-MM-dd");
            String startdatum = formatering.format(dateStartdatum.getDate());
            String slutdatum = formatering.format(dateSlutdatum.getDate());

            try {

                String lararId = idb.fetchSingle("SELECT LARAR_ID FROM LARARE WHERE FORNAMN='" + fornamnefternamn[0] + "' and EFTERNAMN='" + fornamnefternamn[1] + "'");

                // Detta kollar ifall det finns några kurser öht. registrerade på läraren ifråga.
                String finnsKurser = idb.fetchSingle("SELECT KURS_ID FROM KURS WHERE KURSLARARE = " + lararId);
                if (finnsKurser != null) {

                    // Går igenom alla betyg och deras respektive kursID som eleven har registrerade på sig.
                    ArrayList<String> kursIden = idb.fetchColumn("SELECT KURS_ID FROM KURS WHERE KURSLARARE = " + lararId + " ORDER BY KURSNAMN ASC");

                    // Detta händer om användaren inte vill använda datumväljarna för att hitta kurser mellan två valda datum.
                    if (SkaDatumValjas == false) {
                        lbTips.setText("Kurser som " + valdLarare + " håller");

                        // Går igenom alla kursIDn som eleven har och tar fram deras kursnamn.
                        for (int i = 0; i < kursIden.size(); i++) {

                            String kursNamn = idb.fetchSingle("SELECT KURSNAMN FROM KURS WHERE KURS_ID = " + kursIden.get(i));
                            String amnesTillhorighet = idb.fetchSingle("SELECT AMNESTILLHORIGHET FROM KURS WHERE KURS_ID = " + kursIden.get(i));
                            String kursStart = idb.fetchSingle("SELECT KURSSTART FROM KURS WHERE KURS_ID = " + kursIden.get(i));
                            String kursSlut = idb.fetchSingle("SELECT KURSSLUT FROM KURS WHERE KURS_ID = " + kursIden.get(i));
                            String amneNamn = idb.fetchSingle("SELECT AMNESNAMN FROM AMNE JOIN KURS ON AMNE_ID = KURS.AMNESTILLHORIGHET WHERE AMNE_ID = " + amnesTillhorighet);

                            // Skriver ut informationen i en lista.
                            kursLista.append("Kurs: " + kursNamn + "\n" + amneNamn + "\n" + kursStart + " -> " + kursSlut + "\n\n");
                        }

                    // Detta händer om användaren har fyllt i knappen för att välja två datum att söka kurser mellan.
                    } else if (SkaDatumValjas == true) {

                        // Kollar om det finns några kurser mellan datumen som användaren valt.
                        ArrayList<String> datumKurser = idb.fetchColumn("select KURS_ID from KURS where KURSLARARE = " + lararId + " and KURSSTART between '" + startdatum + "' and '" + slutdatum + "' OR KURSSLUT between '" + startdatum + "' and '" + slutdatum + "'");

                        // Finns inga kurser mellan datumen händer detta.
                        if (datumKurser == null) {
                            lbTips.setText(valdLarare + " har inga kurser mellan dessa datum");

                        // Finns det kurser mellan datumen kommer dessa kurser skrivas liknande den vanliga lärarsökningen utan datumbegränsning.
                        } else {
                            lbTips.setText("Kurser som " + valdLarare + " håller mellan datumen");
                            for (int j = 0; j < datumKurser.size(); j++) {

                                String kursNamn = idb.fetchSingle("SELECT KURSNAMN FROM KURS WHERE KURS_ID = " + kursIden.get(j));
                                String amnesTillhorighet = idb.fetchSingle("SELECT AMNESTILLHORIGHET FROM KURS WHERE KURS_ID = " + kursIden.get(j));
                                String kursStart = idb.fetchSingle("SELECT KURSSTART FROM KURS WHERE KURS_ID = " + kursIden.get(j));
                                String kursSlut = idb.fetchSingle("SELECT KURSSLUT FROM KURS WHERE KURS_ID = " + kursIden.get(j));
                                String amneNamn = idb.fetchSingle("SELECT AMNESNAMN FROM AMNE JOIN KURS ON AMNE_ID = KURS.AMNESTILLHORIGHET WHERE AMNE_ID = " + amnesTillhorighet);

                                kursLista.append("Kurs: " + kursNamn + "\n" + amneNamn + "\n" + kursStart + " -> " + kursSlut + "\n\n");
                            }
                        }
                    }

                } else {
                    lbTips.setText(valdLarare + " är inte kurslärare för några kurser");
                }

                // Detta gör att startpositionen i listan är i toppen av textfältet istället för längst ner.
                kursLista.setSelectionStart(0);
                kursLista.setSelectionEnd(0);

            } catch (InfException e) {
                JOptionPane.showMessageDialog(null, "Något gick fel!");
                System.out.println("Internt felmeddelande:" + e.getMessage());
            }
        }
    }//GEN-LAST:event_btnSokLarareActionPerformed

    private void btnTillbakaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTillbakaMouseClicked
        // Stänger denna sida och går tillbaka till huvudsidan för elever.
        setVisible(false);
        Huvudsida_elev elevsidan = new Huvudsida_elev(idb);
        elevsidan.setVisible(true);
    }//GEN-LAST:event_btnTillbakaMouseClicked

    private void btnSokElevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSokElevActionPerformed
        // Tar fram alla kurser en elev är registrerad på.

        String fornamn = txtFornamn.getText();
        String efternamn = txtEfternamn.getText();
        String elevId = txtElevId.getText();

        // Satser som ser till att fälten inte är tomma och att IDfältet inte innehåller bokstäver.
        if (Validering.Kolla3TommaFalt(txtElevId, txtFornamn, txtFornamn)) {
            if (Validering.KollaFaltEfterSiffror(txtElevId)) {

                try {
                    // Tar fram information som är kopplat till IDet användaren skrivit in.
                    String kollaFornamn = idb.fetchSingle("SELECT FORNAMN FROM ELEV WHERE ELEV_ID =" + elevId);
                    String kollaEfternamn = idb.fetchSingle("SELECT EFTERNAMN FROM ELEV WHERE ELEV_ID =" + elevId);
                    String elevIdet = idb.fetchSingle("SELECT ELEV_ID FROM ELEV where FORNAMN='" + kollaFornamn + "' and EFTERNAMN='" + kollaEfternamn + "'");

                    // Kollar om det finns en elev med de namn som användaren skrivit in på IDet som skrivits in.
                    if (Validering.KollaOmPersonFinns(elevIdet)) {

                        // Gör om namnen som skrivits in till gemener och samma med namnen från databasen så jämförelsen inte är skiftlägeskänslig.
                        if (fornamn.toLowerCase().equals(kollaFornamn.toLowerCase()) && efternamn.toLowerCase().equals(kollaEfternamn.toLowerCase())) {

                            // Denna sträng tömmer listan inför varje sökning så inte den gamla informationen ligger kvar.
                            kursLista.setText("");

                            // Detta kollar ifall det finns några kurser öht. registrerade på eleven ifråga.
                            String finnsKurser = idb.fetchSingle("SELECT KURS_ID FROM REGISTRERAD_PA WHERE ELEV_ID = " + elevId);
                            if (finnsKurser != null) {

                                // Går igenom alla betyg och deras respektive kursID som eleven har registrerade på sig.
                                ArrayList<String> kursIden = idb.fetchColumn("SELECT KURS_ID FROM HAR_BETYG_I WHERE ELEV_ID = " + elevId);

                                // Går igenom alla kursIDn som eleven har och tar fram deras kursnamn.
                                for (int i = 0; i < kursIden.size(); i++) {

                                    String kursNamn = idb.fetchSingle("SELECT KURSNAMN FROM KURS WHERE KURS_ID = " + kursIden.get(i));
                                    String kursLarare = idb.fetchSingle("SELECT KURSLARARE FROM KURS WHERE KURS_ID = " + kursIden.get(i));
                                    String amnesTillhorighet = idb.fetchSingle("SELECT AMNESTILLHORIGHET FROM KURS WHERE KURS_ID = " + kursIden.get(i));
                                    String kursStart = idb.fetchSingle("SELECT KURSSTART FROM KURS WHERE KURS_ID = " + kursIden.get(i));
                                    String kursSlut = idb.fetchSingle("SELECT KURSSLUT FROM KURS WHERE KURS_ID = " + kursIden.get(i));

                                    String lararEfternamn = idb.fetchSingle("SELECT EFTERNAMN FROM LARARE JOIN KURS ON LARAR_ID = KURS.KURSLARARE WHERE LARAR_ID = " + kursLarare);
                                    String lararFornamn = idb.fetchSingle("SELECT FORNAMN FROM LARARE JOIN KURS ON LARAR_ID = KURS.KURSLARARE WHERE LARAR_ID = " + kursLarare);
                                    String amneNamn = idb.fetchSingle("SELECT AMNESNAMN FROM AMNE JOIN KURS ON AMNE_ID = KURS.AMNESTILLHORIGHET WHERE AMNE_ID = " + amnesTillhorighet);

                                    // Skriver ut informationen i en lista.
                                    kursLista.append("Kurs: " + kursNamn + "\n" + lararEfternamn + " " + lararFornamn + "\n" + amneNamn + "\n" + kursStart + " -> " + kursSlut + "\n\n");
                                }

                                lbTips.setText("Kurser som " + kollaFornamn + " " + kollaEfternamn + " är registrerad på");

                            } else {
                                lbTips.setText(kollaFornamn + " " + kollaEfternamn + " har inga kurser registrerade");
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Namn och ID matchar inte!");
                        }
                    }

                    // Detta gör att startpositionen i listan är i toppen av textfältet istället för längst ner.
                    kursLista.setSelectionStart(0);
                    kursLista.setSelectionEnd(0);

                } catch (InfException e) {
                    JOptionPane.showMessageDialog(null, "Något gick fel!");
                    System.out.println("Internt felmeddelande:" + e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_btnSokElevActionPerformed

    private void TomFaltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TomFaltActionPerformed
        // Tömmer alla sökfält och listan när användaren klickar på "Tom fält" knappen.
        txtFornamn.setText(null);
        txtEfternamn.setText(null);
        txtElevId.setText(null);
        kursLista.setText(null);
        lbTips.setText(null);
    }//GEN-LAST:event_TomFaltActionPerformed

    private void btnMellanDatumItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btnMellanDatumItemStateChanged
    // Gör så att datumväljarna antingen blir synliga eller osynliga beroende på om vad man väljer.

        boolean visaDatum = btnMellanDatum.isSelected();

        // Har användaren fyllt i knappen för att söka kurser mellan två datum kommer datumväljarna bli synliga.
        if (visaDatum == true) {
            dateStartdatum.setVisible(true);
            dateSlutdatum.setVisible(true);

        // Har användaren klickat ur/lämnat knappen för att söka kurser mellan två datum tom kommer datumväljarna bli osynliga
        } else if (visaDatum == false) {
            dateStartdatum.setVisible(false);
            dateSlutdatum.setVisible(false);
            
            // De kommer även fyllas på med ett random datum för säkerhetsskull ifall användaren tömt datumväljarna på innehåll innan de blivit osynliga.
            try {
                SimpleDateFormat formatering = new SimpleDateFormat("yyyy-MM-dd");
                Date defaultDatum = formatering.parse("2019-05-01");
                dateStartdatum.setDate(defaultDatum);
                dateSlutdatum.setDate(defaultDatum);

            } catch (ParseException ex) {
                Logger.getLogger(Kurser_elev.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnMellanDatumItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane JScrollPane;
    private javax.swing.JButton TomFalt;
    private javax.swing.JRadioButton btnMellanDatum;
    private javax.swing.JButton btnSokElev;
    private javax.swing.JButton btnSokLarare;
    private javax.swing.JLabel btnTillbaka;
    private javax.swing.JComboBox<String> cbLarare;
    private org.jdesktop.swingx.JXDatePicker dateSlutdatum;
    private org.jdesktop.swingx.JXDatePicker dateStartdatum;
    private javax.swing.JLabel iconElever;
    private javax.swing.JTextArea kursLista;
    private javax.swing.JLabel lbEfternamn;
    private javax.swing.JLabel lbElevId;
    private javax.swing.JLabel lbFornamn;
    private javax.swing.JLabel lbKollaKurser;
    private javax.swing.JLabel lbRubrik;
    private javax.swing.JLabel lbSokKurserEfterElev;
    private javax.swing.JLabel lbTips;
    private javax.swing.JLabel lbValjLarare;
    private javax.swing.JPanel panelTitel;
    private javax.swing.JTextField txtEfternamn;
    private javax.swing.JTextField txtElevId;
    private javax.swing.JTextField txtFornamn;
    // End of variables declaration//GEN-END:variables
}
