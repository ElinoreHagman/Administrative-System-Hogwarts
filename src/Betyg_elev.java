
import java.util.ArrayList;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/*
 * Denna sida visar kursbetygen för en elev genom att fylla i korrekt information om eleven ifråga.
 * Förnamn, efternamn och ID används i sökningen så andra elever inte nödvändigt kan se varandras betyg.
 *
 * @author Elinore Hagman
 */
public class Betyg_elev extends javax.swing.JFrame {

    private InfDB idb;

    // Creates new form Betyg_elev
    public Betyg_elev(InfDB idb) {
        initComponents();
        this.idb = idb;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTitel = new javax.swing.JPanel();
        lbRubrik = new javax.swing.JLabel();
        iconbetyg = new javax.swing.JLabel();
        btnSok = new javax.swing.JButton();
        txtFornamn = new javax.swing.JTextField();
        txtEfternamn = new javax.swing.JTextField();
        txtElevId = new javax.swing.JTextField();
        lbFornamn = new javax.swing.JLabel();
        lbInstruktioner = new javax.swing.JLabel();
        lbEfternamn = new javax.swing.JLabel();
        lbElevId = new javax.swing.JLabel();
        btnTillbaka = new javax.swing.JLabel();
        lbSubRubrik = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        betygLista = new javax.swing.JTextArea();
        btnTomFalt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelTitel.setBackground(new java.awt.Color(204, 204, 204));

        lbRubrik.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        lbRubrik.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbRubrik.setText("Betyg");

        iconbetyg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Bilder/icons8_report_card_filled_50px.png"))); // NOI18N

        javax.swing.GroupLayout panelTitelLayout = new javax.swing.GroupLayout(panelTitel);
        panelTitel.setLayout(panelTitelLayout);
        panelTitelLayout.setHorizontalGroup(
            panelTitelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitelLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(iconbetyg)
                .addGap(28, 28, 28)
                .addComponent(lbRubrik, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTitelLayout.setVerticalGroup(
            panelTitelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTitelLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(panelTitelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(iconbetyg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbRubrik, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        btnSok.setText("Sök");
        btnSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSokActionPerformed(evt);
            }
        });

        lbFornamn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbFornamn.setText("Förnamn:");

        lbInstruktioner.setFont(new java.awt.Font("Lucida Grande", 2, 14)); // NOI18N
        lbInstruktioner.setText("Sök fram alla betyg en elev har");

        lbEfternamn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbEfternamn.setText("Efternamn:");

        lbElevId.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lbElevId.setText("ID:");

        btnTillbaka.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Bilder/icons8-go-back-24.png"))); // NOI18N
        btnTillbaka.setText("Gå tillbaka");
        btnTillbaka.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTillbakaMouseClicked(evt);
            }
        });

        lbSubRubrik.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N

        betygLista.setEditable(false);
        betygLista.setColumns(20);
        betygLista.setRows(5);
        jScrollPane1.setViewportView(betygLista);

        btnTomFalt.setText("Töm fält");
        btnTomFalt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTomFaltActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTitel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnTillbaka))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnSok)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbFornamn)
                                    .addComponent(lbEfternamn)
                                    .addComponent(lbElevId))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtFornamn)
                                    .addComponent(txtElevId, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtEfternamn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lbInstruktioner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnTomFalt)))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbSubRubrik, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panelTitel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(lbSubRubrik, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbInstruktioner)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFornamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbFornamn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEfternamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbEfternamn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtElevId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbElevId))
                        .addGap(18, 18, 18)
                        .addComponent(btnSok)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTomFalt))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(btnTillbaka)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSokActionPerformed
        // Söker fram och skriver ut betygen för eleven vars information man skrivit in i fälten.

        String fornamn = txtFornamn.getText();
        String efternamn = txtEfternamn.getText();
        String elevId = txtElevId.getText();

        // Satser som ser till att fälten inte är tomma och att IDfältet inte innehåller bokstäver.
        if (Validering.Kolla3TommaFalt(txtElevId, txtFornamn, txtFornamn)) {
            if (Validering.KollaFaltEfterSiffror(txtElevId)) {

                try {
                    // Tar fram information som är kopplat till IDet användaren skrivit in.
                    String kollaFornamn = idb.fetchSingle("SELECT FORNAMN FROM ELEV WHERE ELEV_ID =" + elevId);
                    String kollaEfternamn = idb.fetchSingle("SELECT EFTERNAMN FROM ELEV WHERE ELEV_ID =" + elevId);
                    String elevIdet = idb.fetchSingle("SELECT ELEV_ID FROM ELEV where FORNAMN='" + kollaFornamn + "' and EFTERNAMN='" + kollaEfternamn + "'");

                    // Kollar om det finns en elev med de namn som användaren skrivit in på IDet som skrivits in.
                    if (Validering.KollaOmPersonFinns(elevIdet)) {

                        // Gör om namnen som skrivits in till gemener och samma med namnen från databasen så jämförelsen inte är skiftlägeskänslig.
                        if (fornamn.toLowerCase().equals(kollaFornamn.toLowerCase()) && efternamn.toLowerCase().equals(kollaEfternamn.toLowerCase())) {

                            // Denna sträng tömmer listan inför varje sökning så inte den gamla informationen ligger kvar.
                            betygLista.setText("");

                            // Detta kollar ifall det finns några betyg öht. registrerade på eleven ifråga.
                            String finnsBetyg = idb.fetchSingle("SELECT KURSBETYG FROM HAR_BETYG_I WHERE ELEV_ID = " + elevId);
                            if (finnsBetyg != null) {

                                // Går igenom alla betyg och deras respektive kursID som eleven har registrerade på sig.
                                ArrayList<String> betygen = idb.fetchColumn("SELECT KURSBETYG FROM HAR_BETYG_I WHERE ELEV_ID = " + elevId);
                                ArrayList<String> kursIden = idb.fetchColumn("SELECT KURS_ID FROM HAR_BETYG_I WHERE ELEV_ID = " + elevId);

                                // Går igenom alla kursIDn som eleven har och tar fram deras kursnamn.
                                for (int i = 0; i < betygen.size(); i++) {
                                    String kursnamn = idb.fetchSingle("SELECT KURSNAMN FROM KURS WHERE KURS_ID = " + kursIden.get(i) + "");

                                    // Skriver ut informationen i en lista.
                                    betygLista.append("Kurs: " + kursnamn + "\nBetyg: " + betygen.get(i) + "\n\n");
                                }

                                lbSubRubrik.setText("Kursbetyg som " + kollaFornamn + " " + kollaEfternamn + " har registrerade");

                            } else {
                                lbSubRubrik.setText(fornamn + " " + efternamn + " har inga betyg registrerade");
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Namn och ID matchar inte!");
                        }
                    }

                    // Detta gör att startpositionen i listan är i toppen av textfältet istället för längst ner när den visas.
                    betygLista.setSelectionStart(0);
                    betygLista.setSelectionEnd(0);

                } catch (InfException e) {
                    JOptionPane.showMessageDialog(null, "Något gick fel!");
                    System.out.println("Internt felmeddelande:" + e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_btnSokActionPerformed

    private void btnTillbakaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTillbakaMouseClicked
        // Stänger denna sida och går tillbaka till elevehuvudsidan.
        setVisible(false);
        Huvudsida_elev elevsidan = new Huvudsida_elev(idb);
        elevsidan.setVisible(true);
    }//GEN-LAST:event_btnTillbakaMouseClicked

    private void btnTomFaltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTomFaltActionPerformed
        // Tömmer alla sökfält och listan på information när man klickar på "Töm fält" kanppen.
        txtFornamn.setText(null);
        txtEfternamn.setText(null);
        txtElevId.setText(null);
        betygLista.setText(null);
        lbSubRubrik.setText(null);
    }//GEN-LAST:event_btnTomFaltActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea betygLista;
    private javax.swing.JButton btnSok;
    private javax.swing.JLabel btnTillbaka;
    private javax.swing.JButton btnTomFalt;
    private javax.swing.JLabel iconbetyg;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbEfternamn;
    private javax.swing.JLabel lbElevId;
    private javax.swing.JLabel lbFornamn;
    private javax.swing.JLabel lbInstruktioner;
    private javax.swing.JLabel lbRubrik;
    private javax.swing.JLabel lbSubRubrik;
    private javax.swing.JPanel panelTitel;
    private javax.swing.JTextField txtEfternamn;
    private javax.swing.JTextField txtElevId;
    private javax.swing.JTextField txtFornamn;
    // End of variables declaration//GEN-END:variables
}
